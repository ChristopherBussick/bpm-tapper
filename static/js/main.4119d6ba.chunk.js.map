{"version":3,"sources":["components/BPMDisplay.js","res/sounds/MRNBV3_03_A_Metronome_127_Dmaj_2_Trimmed.wav","components/Footer.js","components/NavItem.js","components/Nav.js","components/Navbar.js","App.js","index.js"],"names":["lastTapTime","lastTapTimeDifferences","BPMDisplay","showMilliseconds","playAudio","bpmNumberIntegerRef","useRef","clipboardMessageRef","audioTapRef","useState","bpm","setBPM","isCalculating","setCalculating","keyDownHandler","useCallback","currentTapTime","Date","getTime","currentTapTimeDifference","push","averageTimeDifference","forEach","timeDifference","length","calculateBPM","current","classList","contains","remove","setTimeout","add","paused","play","currentTime","useEffect","window","addEventListener","removeEventListener","className","ref","onClick","tempInputElement","document","createElement","integers","Math","floor","bpmPreparedForDecimals","round","amountIntegerDigits","toString","bpmInMSFormat","slice","value","body","appendChild","select","execCommand","removeChild","decimalPlaces","getBPMInMillisecondFormat","src","tapSound","Footer","href","target","rel","NavItem","navItem","type","name","label","styling","state","iconOn","iconOff","labelOn","labelOff","icon","title","id","htmlFor","Nav","setShowMilliseconds","setPlayAudio","faVolumeUp","faVolumeMute","Navbar","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.4119d6ba.chunk.js","sourcesContent":["import { useCallback, useEffect, useRef, useState } from \"react\";\r\nimport tapSound from \"../res/sounds/MRNBV3_03_A_Metronome_127_Dmaj_2_Trimmed.wav\";\r\n\r\nlet lastTapTime;\r\nlet lastTapTimeDifferences = [];\r\n\r\nfunction BPMDisplay({ showMilliseconds, playAudio }) {\r\n  // Refs\r\n\r\n  const bpmNumberIntegerRef = useRef(null);\r\n\r\n  const clipboardMessageRef = useRef(null);\r\n\r\n  const audioTapRef = useRef(null);\r\n\r\n  // States\r\n\r\n  const [bpm, setBPM] = useState(0);\r\n\r\n  const [isCalculating, setCalculating] = useState(false);\r\n\r\n  // Event Handlers\r\n\r\n  const keyDownHandler = useCallback(() => {\r\n    if (!isCalculating) {\r\n      setCalculating(true);\r\n    }\r\n    calculateBPM();\r\n\r\n    if (bpmNumberIntegerRef.current.classList.contains(\"animation-grow\")) {\r\n      bpmNumberIntegerRef.current.classList.remove(\"animation-grow\");\r\n    }\r\n    // This tiny timeout is necessary, because having remove() and add() sequentially after one another does not work for whatever reason\r\n    // TODO:\r\n    // - Find out why this does not work sequentially\r\n    setTimeout(function () {\r\n      bpmNumberIntegerRef.current.classList.add(\"animation-grow\");\r\n    }, 1);\r\n\r\n    if (playAudio) {\r\n      playTapSound();\r\n    }\r\n  }, [isCalculating, playAudio]);\r\n\r\n  // UseEffect\r\n\r\n  useEffect(() => {\r\n    window.addEventListener(\"keydown\", keyDownHandler);\r\n\r\n    // Clean up when the component is removed from the UI (Should not happen here because it is always on screen, but still keep this for proper structuring).\r\n    return () => {\r\n      window.removeEventListener(\"keydown\", keyDownHandler);\r\n    };\r\n  }, [keyDownHandler]);\r\n\r\n  // Functions\r\n\r\n  function playTapSound() {\r\n    if (audioTapRef.current.paused) {\r\n      audioTapRef.current.play();\r\n    } else {\r\n      audioTapRef.current.currentTime = 0;\r\n    }\r\n  }\r\n\r\n  function calculateBPM() {\r\n    // General explanation (as I understand it):\r\n    // If all taps had 1 second time (= 1000ms) between them, then this would equal 60 BPM => This is our point of reference.\r\n    // => So if all taps had 0.5 seconds time between them, then this would equal 120 BPM for example.\r\n    // The formula when having the time difference is: 1000 / timeDifference * 60 BPM = tappedBPM\r\n\r\n    // 1. Take the time between the last tap and this current tap\r\n    var currentTapTime = new Date().getTime();\r\n    var currentTapTimeDifference = currentTapTime - lastTapTime;\r\n\r\n    // Do not calculate or set the bpm on the first tap (You need at least two taps to calculate the bpm).\r\n    if (lastTapTime) {\r\n      // 2. Store all previous time differences between taps, add them up and divide their sum by their amount to get the average time difference\r\n\r\n      // 2.1 Store all previous time differences between taps\r\n      // Handling arrays as lists in JS: https://alligator.io/js/push-pop-shift-unshift-array-methods/\r\n      lastTapTimeDifferences.push(currentTapTimeDifference);\r\n\r\n      // 2.2 Add up the time differences and divide the sum by the amount of stored time differences to get the average\r\n      var averageTimeDifference = 0;\r\n      lastTapTimeDifferences.forEach((timeDifference) => {\r\n        averageTimeDifference = averageTimeDifference + timeDifference;\r\n      });\r\n      averageTimeDifference =\r\n        averageTimeDifference / lastTapTimeDifferences.length;\r\n\r\n      // 3. Convert the time difference into the corresponding BPM\r\n      var currentBPM = (1000 / averageTimeDifference) * 60;\r\n\r\n      setBPM(currentBPM);\r\n    }\r\n\r\n    lastTapTime = currentTapTime;\r\n  }\r\n\r\n  function resetBPM() {\r\n    lastTapTime = 0;\r\n    lastTapTimeDifferences = [];\r\n    setCalculating(false);\r\n    setBPM(0);\r\n  }\r\n\r\n  function getBPMInMillisecondFormat() {\r\n    var integers = Math.floor(bpm);\r\n    var bpmPreparedForDecimals = Math.round(bpm * 10000);\r\n    var amountIntegerDigits = integers.toString().length;\r\n    var decimalPlaces = bpmPreparedForDecimals\r\n      .toString()\r\n      .slice(amountIntegerDigits);\r\n\r\n    // Decimal places check for when the timer is reset and only shows a \"0\". It should then still show decimals.\r\n    var bpmInMSFormat = (\r\n      <div className=\"bpm-ms-format-container\">\r\n        <p className=\"integers\" ref={bpmNumberIntegerRef}>\r\n          {integers}\r\n        </p>\r\n        .<p className=\"decimals\">{decimalPlaces ? decimalPlaces : \"0000\"}</p>\r\n      </div>\r\n    );\r\n\r\n    return bpmInMSFormat;\r\n  }\r\n\r\n  function copyBPMToClipboard() {\r\n    var tempInputElement = document.createElement(\"input\");\r\n    var integers = Math.floor(bpm);\r\n    var bpmPreparedForDecimals = Math.round(bpm * 10000);\r\n    var amountIntegerDigits = integers.toString().length;\r\n    var decimalPlaces = bpmPreparedForDecimals\r\n      .toString()\r\n      .slice(amountIntegerDigits);\r\n\r\n    var bpmInMSFormat = integers + \".\" + decimalPlaces;\r\n    tempInputElement.value = showMilliseconds ? bpmInMSFormat : Math.round(bpm);\r\n\r\n    document.body.appendChild(tempInputElement);\r\n    tempInputElement.select();\r\n    document.execCommand(\"copy\");\r\n    document.body.removeChild(tempInputElement);\r\n\r\n    if (clipboardMessageRef.current.classList.contains(\"animation-popup\")) {\r\n      clipboardMessageRef.current.classList.remove(\"animation-popup\");\r\n    }\r\n    // This tiny timeout is necessary, because having remove() and add() sequentially after one another does not work for whatever reason\r\n    // TODO:\r\n    // - Find out why this does not work sequentially\r\n    setTimeout(function () {\r\n      clipboardMessageRef.current.classList.add(\"animation-popup\");\r\n    }, 1);\r\n  }\r\n\r\n  return (\r\n    <div className=\"bpm-display\">\r\n      <div className=\"messages-and-bpm-container\">\r\n        <p className={\"clipboard-message\"} ref={clipboardMessageRef}>\r\n          Copied to clipboard!\r\n        </p>\r\n        <p className={\"start-message\" + (isCalculating ? \" invisible\" : \"\")}>\r\n          Tap any key to start\r\n        </p>\r\n        <div\r\n          className={\r\n            \"bpm-number-container\" + (showMilliseconds ? \" baseline-align\" : \"\")\r\n          }\r\n        >\r\n          <div className=\"bpm-number\" onClick={copyBPMToClipboard}>\r\n            {showMilliseconds ? (\r\n              getBPMInMillisecondFormat()\r\n            ) : (\r\n              <div className=\"integers\" ref={bpmNumberIntegerRef}>\r\n                {Math.round(bpm)}\r\n              </div>\r\n            )}\r\n          </div>\r\n          <p className=\"bpm-label\">BPM</p>\r\n        </div>\r\n        <button\r\n          className={\"reset-button\" + (isCalculating ? \"\" : \" invisible\")}\r\n          onClick={resetBPM}\r\n        >\r\n          Reset\r\n        </button>\r\n      </div>\r\n      <audio ref={audioTapRef} src={tapSound} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default BPMDisplay;\r\n","export default __webpack_public_path__ + \"static/media/MRNBV3_03_A_Metronome_127_Dmaj_2_Trimmed.2fc7e0f6.wav\";","function Footer() {\r\n  return (\r\n    <div className=\"footer\">\r\n      <a\r\n        className=\"about\"\r\n        href=\"http://www.christopherbussick.com\"\r\n        target=\"_blank\"\r\n        rel=\"noreferrer\"\r\n      >\r\n        By Christopher Bussick\r\n      </a>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Footer;\r\n","import React from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\nfunction NavItem({\r\n  type,\r\n  name,\r\n  onClick,\r\n  label,\r\n  styling,\r\n  state,\r\n  iconOn,\r\n  iconOff,\r\n  labelOn,\r\n  labelOff,\r\n}) {\r\n  var navItem;\r\n\r\n  if (type === \"checkbox\") {\r\n    if (!styling || styling === \"checkbox\") {\r\n      navItem = (\r\n        <div className={name + \"-container nav-item\"}>\r\n          <div className=\"checkbox-container\">\r\n            <input\r\n              className={name}\r\n              id={name}\r\n              name={name}\r\n              type={type}\r\n              onClick={onClick}\r\n            />\r\n            <div className=\"checkmark\">✔</div>\r\n          </div>\r\n          <label className={name + \"-label\"} htmlFor={name}>\r\n            {label}\r\n          </label>\r\n        </div>\r\n      );\r\n    } else if (styling === \"icon\") {\r\n      navItem = (\r\n        <FontAwesomeIcon\r\n          className=\"icon-checkbox nav-item fa-icon fa-fw\"\r\n          icon={state ? iconOn : iconOff}\r\n          onClick={onClick}\r\n          title={state ? labelOn : labelOff}\r\n        />\r\n      );\r\n    }\r\n  } else if (type === \"button\") {\r\n    navItem = (\r\n      <button className={name + \" nav-item\"} onClick={onClick}>\r\n        {label}\r\n      </button>\r\n    );\r\n  } else {\r\n    navItem = null;\r\n  }\r\n\r\n  return navItem;\r\n}\r\n\r\nexport default NavItem;\r\n","import React from \"react\";\r\nimport NavItem from \"./NavItem\";\r\nimport { faVolumeUp, faVolumeMute } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nfunction Nav({ setShowMilliseconds, playAudio, setPlayAudio }) {\r\n  function toggleShowMilliseconds() {\r\n    setShowMilliseconds((showMilliseconds) => !showMilliseconds);\r\n  }\r\n\r\n  function toggleAudio() {\r\n    setPlayAudio((playAudio) => !playAudio);\r\n  }\r\n\r\n  return (\r\n    <nav className=\"nav\">\r\n      <NavItem\r\n        type=\"checkbox\"\r\n        name=\"show-milliseconds-checkbox\"\r\n        onClick={toggleShowMilliseconds}\r\n        label=\"Show Milliseconds\"\r\n      />\r\n      <NavItem\r\n        type=\"checkbox\"\r\n        styling=\"icon\"\r\n        name=\"toggle-audio-button\"\r\n        state={playAudio}\r\n        onClick={toggleAudio}\r\n        iconOn={faVolumeUp}\r\n        iconOff={faVolumeMute}\r\n        labelOn=\"Turn audio off\"\r\n        labelOff=\"Turn audio on\"\r\n      />\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default Nav;\r\n","import React from \"react\";\r\nimport Nav from \"./Nav\";\r\n\r\nfunction Navbar({ title, setShowMilliseconds, playAudio, setPlayAudio }) {\r\n  return (\r\n    <nav className=\"navbar\">\r\n      <p className=\"title\">{title}</p>\r\n      <Nav\r\n        setShowMilliseconds={setShowMilliseconds}\r\n        playAudio={playAudio}\r\n        setPlayAudio={setPlayAudio}\r\n      />\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default Navbar;\r\n","import React, { useState } from \"react\";\nimport BPMDisplay from \"./components/BPMDisplay\";\nimport Footer from \"./components/Footer\";\nimport Navbar from \"./components/Navbar\";\nimport \"./styles/app.scss\";\n\nfunction App() {\n  const [showMilliseconds, setShowMilliseconds] = useState(false);\n\n  const [playAudio, setPlayAudio] = useState(true);\n\n  return (\n    <div className=\"app\">\n      <Navbar\n        title=\"BPM Tapper\"\n        setShowMilliseconds={setShowMilliseconds}\n        playAudio={playAudio}\n        setPlayAudio={setPlayAudio}\n      />\n      <BPMDisplay showMilliseconds={showMilliseconds} playAudio={playAudio} />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}